root/usr/os/os3.c  1: // os3.c -- time slice between two user tasks and implement write syscall
root/usr/os/os3.c  2: 
root/usr/os/os3.c  3: #include <u.h>
root/lib/u.h  1: // u.h
root/lib/u.h  2: 
root/lib/u.h  3: // instruction set
root/lib/u.h  4: enum {
root/lib/u.h  5:   HALT,ENT ,LEV ,JMP ,JMPI,JSR ,JSRA,LEA ,LEAG,CYC ,MCPY,MCMP,MCHR,MSET, // system
root/lib/u.h  6:   LL  ,LLS ,LLH ,LLC ,LLB ,LLD ,LLF ,LG  ,LGS ,LGH ,LGC ,LGB ,LGD ,LGF , // load a
root/lib/u.h  7:   LX  ,LXS ,LXH ,LXC ,LXB ,LXD ,LXF ,LI  ,LHI ,LIF ,
root/lib/u.h  8:   LBL ,LBLS,LBLH,LBLC,LBLB,LBLD,LBLF,LBG ,LBGS,LBGH,LBGC,LBGB,LBGD,LBGF, // load b
root/lib/u.h  9:   LBX ,LBXS,LBXH,LBXC,LBXB,LBXD,LBXF,LBI ,LBHI,LBIF,LBA ,LBAD,
root/lib/u.h  10:   SL  ,SLH ,SLB ,SLD ,SLF ,SG  ,SGH ,SGB ,SGD ,SGF ,                     // store
root/lib/u.h  11:   SX  ,SXH ,SXB ,SXD ,SXF ,
root/lib/u.h  12:   ADDF,SUBF,MULF,DIVF,                                                   // arithmetic
root/lib/u.h  13:   ADD ,ADDI,ADDL,SUB ,SUBI,SUBL,MUL ,MULI,MULL,DIV ,DIVI,DIVL,
root/lib/u.h  14:   DVU ,DVUI,DVUL,MOD ,MODI,MODL,MDU ,MDUI,MDUL,AND ,ANDI,ANDL,
root/lib/u.h  15:   OR  ,ORI ,ORL ,XOR ,XORI,XORL,SHL ,SHLI,SHLL,SHR ,SHRI,SHRL,
root/lib/u.h  16:   SRU ,SRUI,SRUL,EQ  ,EQF ,NE  ,NEF ,LT  ,LTU ,LTF ,GE  ,GEU ,GEF ,      // logical
root/lib/u.h  17:   BZ  ,BZF ,BNZ ,BNZF,BE  ,BEF ,BNE ,BNEF,BLT ,BLTU,BLTF,BGE ,BGEU,BGEF, // conditional
root/lib/u.h  18:   CID ,CUD ,CDI ,CDU ,                                                   // conversion
root/lib/u.h  19:   CLI ,STI ,RTI ,BIN ,BOUT,NOP ,SSP ,PSHA,PSHI,PSHF,PSHB,POPB,POPF,POPA, // misc
root/lib/u.h  20:   IVEC,PDIR,SPAG,TIME,LVAD,TRAP,LUSP,SUSP,LCL ,LCA ,PSHC,POPC,MSIZ,
root/lib/u.h  21:   PSHG,POPG,NET1,NET2,NET3,NET4,NET5,NET6,NET7,NET8,NET9,
root/lib/u.h  22:   POW ,ATN2,FABS,ATAN,LOG ,LOGT,EXP ,FLOR,CEIL,HYPO,SIN ,COS ,TAN ,ASIN, // math
root/lib/u.h  23:   ACOS,SINH,COSH,TANH,SQRT,FMOD,
root/lib/u.h  24:   IDLE
root/lib/u.h  25: };
root/lib/u.h  26: 
root/lib/u.h  27: // system calls
root/lib/u.h  28: enum {
root/lib/u.h  29:   S_fork=1, S_exit,   S_wait,   S_pipe,   S_write,  S_read,   S_close,  S_kill,
root/lib/u.h  30:   S_exec,   S_open,   S_mknod,  S_unlink, S_fstat,  S_link,   S_mkdir,  S_chdir,
root/lib/u.h  31:   S_dup2,   S_getpid, S_sbrk,   S_sleep,  S_uptime, S_lseek,  S_mount,  S_umount,
root/lib/u.h  32:   S_socket, S_bind,   S_listen, S_poll,   S_accept, S_connect, 
root/lib/u.h  33: };
root/lib/u.h  34: 
root/lib/u.h  35: typedef unsigned char uchar;
root/lib/u.h  36: typedef unsigned short ushort;
root/lib/u.h  37: typedef unsigned int uint;
root/lib/u.h  38: 
root/usr/os/os3.c  4: 
root/usr/os/os3.c  5: enum {    // processor fault codes
root/usr/os/os3.c  6:   FMEM,   // bad physical address
root/usr/os/os3.c  7:   FTIMER, // timer interrupt
root/usr/os/os3.c  8:   FKEYBD, // keyboard interrupt
root/usr/os/os3.c  9:   FPRIV,  // privileged instruction
root/usr/os/os3.c  10:   FINST,  // illegal instruction
root/usr/os/os3.c  11:   FSYS,   // software trap
root/usr/os/os3.c  12:   FARITH, // arithmetic trap
root/usr/os/os3.c  13:   FIPAGE, // page fault on opcode fetch
root/usr/os/os3.c  14:   FWPAGE, // page fault on write
root/usr/os/os3.c  15:   FRPAGE, // page fault on read
root/usr/os/os3.c  16:   USER=16 // user mode exception 
root/usr/os/os3.c  17: };
root/usr/os/os3.c  18: 
root/usr/os/os3.c  19: char task0_stack[1000];
root/usr/os/os3.c  20: char task0_kstack[1000];
root/usr/os/os3.c  21: 
root/usr/os/os3.c  22: char task1_stack[1000];
root/usr/os/os3.c  23: char task1_kstack[1000];
root/usr/os/os3.c  24: 
root/usr/os/os3.c  25: int *task0_sp;
root/usr/os/os3.c  26: int *task1_sp;
root/usr/os/os3.c  27: 
root/usr/os/os3.c  28: int current;
root/usr/os/os3.c  29: 
root/usr/os/os3.c  30: out(port, val)  { asm(LL,8); asm(LBL,16); asm(BOUT); }
00000000  0000080e  LL    0x8 (D 8)
00000004  00001026  LBL   0x10 (D 16)
00000008  0000009a  BOUT
root/usr/os/os3.c  31: ivec(void *isr) { asm(LL,8); asm(IVEC); }
0000000c  00000002  LEV   0x0 (D 0)
00000010  0000080e  LL    0x8 (D 8)
00000014  000000a4  IVEC
root/usr/os/os3.c  32: stmr(int val)   { asm(LL,8); asm(TIME); }
00000018  00000002  LEV   0x0 (D 0)
0000001c  0000080e  LL    0x8 (D 8)
00000020  000000a7  TIME
root/usr/os/os3.c  33: halt(value)     { asm(LL,8); asm(HALT); }
00000024  00000002  LEV   0x0 (D 0)
00000028  0000080e  LL    0x8 (D 8)
0000002c  00000000  HALT
root/usr/os/os3.c  34: 
root/usr/os/os3.c  35: sys_write(fd, char *p, n) { int i; for (i=0; i<n; i++) out(fd, p[i]); return i; }
00000030  00000002  LEV   0x0 (D 0)
00000034  fffff801  ENT   0xfffffff8 (D -8)
00000038  00000023  LI    0x0 (D 0)
0000003c  00000440  SL    0x4 (D 4)
00000040  00000003  JMP   <fwd>
00000044  0000180e  LL    0x18 (D 24)
00000048  00000455  ADDL  0x4 (D 4)
0000004c  0000001f  LXC 
00000050  0000009d  PSHA
00000054  0000180e  LL    0x18 (D 24)
00000058  0000009d  PSHA
0000005c  ffffa005  JSR   0xffffffa0 (TO 0x0)
00000060  00001001  ENT   0x10 (D 16)
00000064  0000040e  LL    0x4 (D 4)
00000068  ffffff57  SUBI  0xffffffff (D -1)
0000006c  00000440  SL    0x4 (D 4)
00000070  0000040e  LL    0x4 (D 4)
00000074  00002026  LBL   0x20 (D 32)
00000078  0000008c  BLT   <fwd>
0000007c  0000040e  LL    0x4 (D 4)
00000080  00000802  LEV   0x8 (D 8)
root/usr/os/os3.c  36: 
root/usr/os/os3.c  37: write() { asm(LL,8); asm(LBL,16); asm(LCL,24); asm(TRAP,S_write); }
00000084  00000802  LEV   0x8 (D 8)
00000088  0000080e  LL    0x8 (D 8)
0000008c  00001026  LBL   0x10 (D 16)
00000090  000018ac  LCL   0x18 (D 24)
00000094  000005a9  TRAP  0x5 (D 5)
root/usr/os/os3.c  38: 
root/usr/os/os3.c  39: task0()
00000098  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  40: {
root/usr/os/os3.c  41:   while(current < 10)
0000009c  00000003  JMP   <fwd>
root/usr/os/os3.c  42:     write(1, "00", 2);
000000a0  0000029e  PSHI  0x2 (D 2)
000000a4  00000008  LEAG  0x0 (D 0)
000000a8  0000009d  PSHA
000000ac  0000019e  PSHI  0x1 (D 1)
000000b0  ffffd405  JSR   0xffffffd4 (TO 0x88)
000000b4  00001801  ENT   0x18 (D 24)
root/usr/os/os3.c  43: 
root/usr/os/os3.c  44:   write(1,"task0 exit\n", 11);
000000b8  000fa815  LG    0xfa8 (D 4008)
000000bc  00000a3b  LBI   0xa (D 10)
000000c0  0000008c  BLT   <fwd>
000000c4  00000b9e  PSHI  0xb (D 11)
000000c8  00000308  LEAG  0x3 (D 3)
000000cc  0000009d  PSHA
000000d0  0000019e  PSHI  0x1 (D 1)
000000d4  ffffb005  JSR   0xffffffb0 (TO 0x88)
000000d8  00001801  ENT   0x18 (D 24)
root/usr/os/os3.c  45:   halt(0);
000000dc  0000009e  PSHI  0x0 (D 0)
000000e0  ffff4405  JSR   0xffffff44 (TO 0x28)
000000e4  00000801  ENT   0x8 (D 8)
root/usr/os/os3.c  46: }
root/usr/os/os3.c  47: 
root/usr/os/os3.c  48: task1()
000000e8  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  49: {
root/usr/os/os3.c  50:   while(current < 10)
000000ec  00000003  JMP   <fwd>
root/usr/os/os3.c  51:     write(1, "11", 2);
000000f0  0000029e  PSHI  0x2 (D 2)
000000f4  00000f08  LEAG  0xf (D 15)
000000f8  0000009d  PSHA
000000fc  0000019e  PSHI  0x1 (D 1)
00000100  ffff8405  JSR   0xffffff84 (TO 0x88)
00000104  00001801  ENT   0x18 (D 24)
root/usr/os/os3.c  52: 
root/usr/os/os3.c  53:   write(1,"task1 exit\n", 11);
00000108  000fa815  LG    0xfa8 (D 4008)
0000010c  00000a3b  LBI   0xa (D 10)
00000110  0000008c  BLT   <fwd>
00000114  00000b9e  PSHI  0xb (D 11)
00000118  00001208  LEAG  0x12 (D 18)
0000011c  0000009d  PSHA
00000120  0000019e  PSHI  0x1 (D 1)
00000124  ffff6005  JSR   0xffffff60 (TO 0x88)
00000128  00001801  ENT   0x18 (D 24)
root/usr/os/os3.c  54:   halt(0);
0000012c  0000009e  PSHI  0x0 (D 0)
00000130  fffef405  JSR   0xfffffef4 (TO 0x28)
00000134  00000801  ENT   0x8 (D 8)
root/usr/os/os3.c  55: }
root/usr/os/os3.c  56: 
root/usr/os/os3.c  57: swtch(int *old, int new) // switch stacks
00000138  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  58: {
root/usr/os/os3.c  59:   asm(LEA, 0); // a = sp
0000013c  00000007  LEA   0x0 (D 0)
root/usr/os/os3.c  60:   asm(LBL, 8); // b = old
00000140  00000826  LBL   0x8 (D 8)
root/usr/os/os3.c  61:   asm(SX, 0);  // *b = a
00000144  0000004a  SX    0x0 (D 0)
root/usr/os/os3.c  62:   asm(LL, 16); // a = new
00000148  0000100e  LL    0x10 (D 16)
root/usr/os/os3.c  63:   asm(SSP);    // sp = a
0000014c  0000009c  SSP 
root/usr/os/os3.c  64: }
root/usr/os/os3.c  65: 
root/usr/os/os3.c  66: trap(int *sp, int c, int b, int a, int fc, unsigned *pc)
00000150  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  67: {
root/usr/os/os3.c  68:   switch (fc) {
00000154  0000280e  LL    0x28 (D 40)
00000158  00000003  JMP   <fwd>
root/usr/os/os3.c  69:   case FSYS + USER: // syscall
root/usr/os/os3.c  70:     switch (pc[-1] >> 8) {
0000015c  0000300e  LL    0x30 (D 48)
00000160  fffffc1c  LX    0xfffffffc (D -4)
00000164  00000878  SRUI  0x8 (D 8)
00000168  00000003  JMP   <fwd>
root/usr/os/os3.c  71:     case S_write: a = sys_write(a, b, c); break;
0000016c  0000100e  LL    0x10 (D 16)
00000170  0000009d  PSHA
00000174  0000200e  LL    0x20 (D 32)
00000178  0000009d  PSHA
0000017c  0000300e  LL    0x30 (D 48)
00000180  0000009d  PSHA
00000184  fffeac05  JSR   0xfffffeac (TO 0x34)
00000188  00001801  ENT   0x18 (D 24)
0000018c  00002040  SL    0x20 (D 32)
00000190  00000003  JMP   <fwd>
root/usr/os/os3.c  72:     default: sys_write(1, "panic! unknown syscall\n", 23); asm(HALT);
00000194  0000179e  PSHI  0x17 (D 23)
00000198  00001e08  LEAG  0x1e (D 30)
0000019c  0000009d  PSHA
000001a0  0000019e  PSHI  0x1 (D 1)
000001a4  fffe8c05  JSR   0xfffffe8c (TO 0x34)
000001a8  00001801  ENT   0x18 (D 24)
000001ac  00000000  HALT
root/usr/os/os3.c  73:     }
root/usr/os/os3.c  74:     break;
000001b0  00019003  JMP   <fwd>
000001b4  0000063b  LBI   0x6 (D 6)
000001b8  ffffd890  BGEU  0xffffffd8 (D -40)
000001bc  00003804  JMPI  0x38 (D 56)
000001c0  00000003  JMP   <fwd>
root/usr/os/os3.c  75:     
root/usr/os/os3.c  76:   case FTIMER:  // timer
root/usr/os/os3.c  77:   case FTIMER + USER:
root/usr/os/os3.c  78:     out(1,'x');
000001c4  0000789e  PSHI  0x78 (D 120)
000001c8  0000019e  PSHI  0x1 (D 1)
000001cc  fffe3005  JSR   0xfffffe30 (TO 0x0)
000001d0  00001001  ENT   0x10 (D 16)
root/usr/os/os3.c  79:     if (++current & 1)
000001d4  000fa815  LG    0xfa8 (D 4008)
000001d8  00000154  ADDI  0x1 (D 1)
000001dc  000fa845  SG    0xfa8 (D 4008)
000001e0  00000169  ANDI  0x1 (D 1)
000001e4  00000084  BZ    <fwd>
root/usr/os/os3.c  80:       swtch(&task0_sp, task1_sp);
000001e8  000fa415  LG    0xfa4 (D 4004)
000001ec  0000009d  PSHA
000001f0  000fa008  LEAG  0xfa0 (D 4000)
000001f4  0000009d  PSHA
000001f8  ffff4005  JSR   0xffffff40 (TO 0x13c)
000001fc  00001001  ENT   0x10 (D 16)
root/usr/os/os3.c  81:     else
root/usr/os/os3.c  82:       swtch(&task1_sp, task0_sp);
00000200  00000003  JMP   <fwd>
00000204  000fa015  LG    0xfa0 (D 4000)
00000208  0000009d  PSHA
0000020c  000fa408  LEAG  0xfa4 (D 4004)
00000210  0000009d  PSHA
00000214  ffff2405  JSR   0xffffff24 (TO 0x13c)
00000218  00001001  ENT   0x10 (D 16)
root/usr/os/os3.c  83:     break;
0000021c  0001c003  JMP   <fwd>
root/usr/os/os3.c  84:     
root/usr/os/os3.c  85:   default:
root/usr/os/os3.c  86:     default: sys_write(1, "panic! unknown interrupt\n", 25); asm(HALT);  
00000220  0000199e  PSHI  0x19 (D 25)
00000224  00005008  LEAG  0x50 (D 80)
00000228  0000009d  PSHA
0000022c  0000019e  PSHI  0x1 (D 1)
00000230  fffe0005  JSR   0xfffffe00 (TO 0x34)
00000234  00001801  ENT   0x18 (D 24)
00000238  00000000  HALT
root/usr/os/os3.c  87:   }
root/usr/os/os3.c  88: }
0000023c  00021c03  JMP   <fwd>
00000240  0000163b  LBI   0x16 (D 22)
00000244  ffffd890  BGEU  0xffffffd8 (D -40)
00000248  00006c04  JMPI  0x6c (D 108)
root/usr/os/os3.c  89: 
root/usr/os/os3.c  90: alltraps()
0000024c  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  91: {
root/usr/os/os3.c  92:   asm(PSHA);
00000250  0000009d  PSHA
root/usr/os/os3.c  93:   asm(PSHB);
00000254  000000a0  PSHB
root/usr/os/os3.c  94:   asm(PSHC);
00000258  000000ae  PSHC
root/usr/os/os3.c  95:   asm(LUSP); asm(PSHA);
0000025c  000000aa  LUSP
00000260  0000009d  PSHA
root/usr/os/os3.c  96:   trap();                // registers passed by reference/magic
00000264  fffeec05  JSR   0xfffffeec (TO 0x154)
root/usr/os/os3.c  97:   asm(POPA); asm(SUSP);
00000268  000000a3  POPA
0000026c  000000ab  SUSP
root/usr/os/os3.c  98:   asm(POPC);
00000270  000000af  POPC
root/usr/os/os3.c  99:   asm(POPB);
00000274  000000a1  POPB
root/usr/os/os3.c  100:   asm(POPA);
00000278  000000a3  POPA
root/usr/os/os3.c  101:   asm(RTI);
0000027c  00000098  RTI 
root/usr/os/os3.c  102: }
root/usr/os/os3.c  103: 
root/usr/os/os3.c  104: trapret()
00000280  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  105: {
root/usr/os/os3.c  106:   asm(POPA); asm(SUSP);
00000284  000000a3  POPA
00000288  000000ab  SUSP
root/usr/os/os3.c  107:   asm(POPC);
0000028c  000000af  POPC
root/usr/os/os3.c  108:   asm(POPB);
00000290  000000a1  POPB
root/usr/os/os3.c  109:   asm(POPA);
00000294  000000a3  POPA
root/usr/os/os3.c  110:   asm(RTI);
00000298  00000098  RTI 
root/usr/os/os3.c  111: }
root/usr/os/os3.c  112: 
root/usr/os/os3.c  113: main()
0000029c  00000002  LEV   0x0 (D 0)
root/usr/os/os3.c  114: {
root/usr/os/os3.c  115:   int *kstack;
root/usr/os/os3.c  116:   
root/usr/os/os3.c  117:   stmr(5000);
000002a0  fffff801  ENT   0xfffffff8 (D -8)
000002a4  0013889e  PSHI  0x1388 (D 5000)
000002a8  fffd7005  JSR   0xfffffd70 (TO 0x1c)
000002ac  00000801  ENT   0x8 (D 8)
root/usr/os/os3.c  118:   ivec(alltraps);
000002b0  ffff9c08  LEAG  0xffffff9c (D -100)
000002b4  0000009d  PSHA
000002b8  fffd5405  JSR   0xfffffd54 (TO 0x10)
000002bc  00000801  ENT   0x8 (D 8)
root/usr/os/os3.c  119: 
root/usr/os/os3.c  120:   task0_sp = &task0_kstack[1000];
000002c0  0007d008  LEAG  0x7d0 (D 2000)
000002c4  000fa045  SG    0xfa0 (D 4000)
root/usr/os/os3.c  121:   task0_sp -= 2; *task0_sp = &task0;
000002c8  000fa015  LG    0xfa0 (D 4000)
000002cc  00000857  SUBI  0x8 (D 8)
000002d0  000fa045  SG    0xfa0 (D 4000)
000002d4  fffdc408  LEAG  0xfffffdc4 (D -572)
000002d8  000fa02d  LBG   0xfa0 (D 4000)
000002dc  0000004a  SX  
root/usr/os/os3.c  122:   task0_sp -= 2; *task0_sp = USER; // fault code
000002e0  000fa015  LG    0xfa0 (D 4000)
000002e4  00000857  SUBI  0x8 (D 8)
000002e8  000fa045  SG    0xfa0 (D 4000)
000002ec  00001023  LI    0x10 (D 16)
000002f0  000fa02d  LBG   0xfa0 (D 4000)
000002f4  0000004a  SX  
root/usr/os/os3.c  123:   task0_sp -= 2; *task0_sp = 0; // a
000002f8  000fa015  LG    0xfa0 (D 4000)
000002fc  00000857  SUBI  0x8 (D 8)
00000300  000fa045  SG    0xfa0 (D 4000)
00000304  00000023  LI    0x0 (D 0)
00000308  000fa02d  LBG   0xfa0 (D 4000)
0000030c  0000004a  SX  
root/usr/os/os3.c  124:   task0_sp -= 2; *task0_sp = 0; // b
00000310  000fa015  LG    0xfa0 (D 4000)
00000314  00000857  SUBI  0x8 (D 8)
00000318  000fa045  SG    0xfa0 (D 4000)
0000031c  00000023  LI    0x0 (D 0)
00000320  000fa02d  LBG   0xfa0 (D 4000)
00000324  0000004a  SX  
root/usr/os/os3.c  125:   task0_sp -= 2; *task0_sp = 0; // c
00000328  000fa015  LG    0xfa0 (D 4000)
0000032c  00000857  SUBI  0x8 (D 8)
00000330  000fa045  SG    0xfa0 (D 4000)
00000334  00000023  LI    0x0 (D 0)
00000338  000fa02d  LBG   0xfa0 (D 4000)
0000033c  0000004a  SX  
root/usr/os/os3.c  126:   task0_sp -= 2; *task0_sp = &task0_stack[1000];
00000340  000fa015  LG    0xfa0 (D 4000)
00000344  00000857  SUBI  0x8 (D 8)
00000348  000fa045  SG    0xfa0 (D 4000)
0000034c  0003e808  LEAG  0x3e8 (D 1000)
00000350  000fa02d  LBG   0xfa0 (D 4000)
00000354  0000004a  SX  
root/usr/os/os3.c  127:   task0_sp -= 2; *task0_sp = &trapret;  
00000358  000fa015  LG    0xfa0 (D 4000)
0000035c  00000857  SUBI  0x8 (D 8)
00000360  000fa045  SG    0xfa0 (D 4000)
00000364  ffff1c08  LEAG  0xffffff1c (D -228)
00000368  000fa02d  LBG   0xfa0 (D 4000)
0000036c  0000004a  SX  
root/usr/os/os3.c  128:   
root/usr/os/os3.c  129:   task1_sp = &task1_kstack[1000];
00000370  000fa008  LEAG  0xfa0 (D 4000)
00000374  000fa445  SG    0xfa4 (D 4004)
root/usr/os/os3.c  130:   task1_sp -= 2; *task1_sp = &task1;
00000378  000fa415  LG    0xfa4 (D 4004)
0000037c  00000857  SUBI  0x8 (D 8)
00000380  000fa445  SG    0xfa4 (D 4004)
00000384  fffd6408  LEAG  0xfffffd64 (D -668)
00000388  000fa42d  LBG   0xfa4 (D 4004)
0000038c  0000004a  SX  
root/usr/os/os3.c  131:   task1_sp -= 2; *task1_sp = USER; // fault code
00000390  000fa415  LG    0xfa4 (D 4004)
00000394  00000857  SUBI  0x8 (D 8)
00000398  000fa445  SG    0xfa4 (D 4004)
0000039c  00001023  LI    0x10 (D 16)
000003a0  000fa42d  LBG   0xfa4 (D 4004)
000003a4  0000004a  SX  
root/usr/os/os3.c  132:   task1_sp -= 2; *task1_sp = 0; // a
000003a8  000fa415  LG    0xfa4 (D 4004)
000003ac  00000857  SUBI  0x8 (D 8)
000003b0  000fa445  SG    0xfa4 (D 4004)
000003b4  00000023  LI    0x0 (D 0)
000003b8  000fa42d  LBG   0xfa4 (D 4004)
000003bc  0000004a  SX  
root/usr/os/os3.c  133:   task1_sp -= 2; *task1_sp = 0; // b
000003c0  000fa415  LG    0xfa4 (D 4004)
000003c4  00000857  SUBI  0x8 (D 8)
000003c8  000fa445  SG    0xfa4 (D 4004)
000003cc  00000023  LI    0x0 (D 0)
000003d0  000fa42d  LBG   0xfa4 (D 4004)
000003d4  0000004a  SX  
root/usr/os/os3.c  134:   task1_sp -= 2; *task1_sp = 0; // c
000003d8  000fa415  LG    0xfa4 (D 4004)
000003dc  00000857  SUBI  0x8 (D 8)
000003e0  000fa445  SG    0xfa4 (D 4004)
000003e4  00000023  LI    0x0 (D 0)
000003e8  000fa42d  LBG   0xfa4 (D 4004)
000003ec  0000004a  SX  
root/usr/os/os3.c  135:   task1_sp -= 2; *task1_sp = &task1_stack[1000];
000003f0  000fa415  LG    0xfa4 (D 4004)
000003f4  00000857  SUBI  0x8 (D 8)
000003f8  000fa445  SG    0xfa4 (D 4004)
000003fc  000bb808  LEAG  0xbb8 (D 3000)
00000400  000fa42d  LBG   0xfa4 (D 4004)
00000404  0000004a  SX  
root/usr/os/os3.c  136:   task1_sp -= 2; *task1_sp = &trapret;
00000408  000fa415  LG    0xfa4 (D 4004)
0000040c  00000857  SUBI  0x8 (D 8)
00000410  000fa445  SG    0xfa4 (D 4004)
00000414  fffe6c08  LEAG  0xfffffe6c (D -404)
00000418  000fa42d  LBG   0xfa4 (D 4004)
0000041c  0000004a  SX  
root/usr/os/os3.c  137: 
root/usr/os/os3.c  138:   kstack = task0_sp;
00000420  000fa015  LG    0xfa0 (D 4000)
00000424  00000440  SL    0x4 (D 4)
root/usr/os/os3.c  139:   
root/usr/os/os3.c  140:   asm(LL, 4); // a = kstack
00000428  0000040e  LL    0x4 (D 4)
root/usr/os/os3.c  141:   asm(SSP);   // sp = a
0000042c  0000009c  SSP 
root/usr/os/os3.c  142:   asm(LEV);
00000430  00000002  LEV 
root/usr/os/os3.c  143: }
root/usr/os/os3.c  144: 
00000434  00000802  LEV   0x8 (D 8)
