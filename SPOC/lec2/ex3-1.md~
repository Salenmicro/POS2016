#问答题

###os1中的task0和task1的堆栈的起始和终止地址是什么？
- task0：0x07c00000 - 
- task1：0x370 - 0x2a8

###os1是如何实现任务切换的？
- 设置切换时间阈值为5000，当时钟达到阈值时触发时钟中断，进入中断处理例程，执行swtch函数切换任务。
- 当前任务为task0时，执行swtch函数时，会将当前sp值保存在task0的堆栈栈顶，然后将sp值赋值为task1的栈顶地址，从而在swtch函数返回并且alltraps函数返回时，跳转到task1函数。
- 当前任务为task1时，与上述情况类似。
- 需要注意的是，在程序第一次执行swtch函数时，task1的栈顶存放的是trapret的地址，因此swtch函数返回时，将跳转到trapret函数，而trapret函数返回时，栈顶保存的是task1的地址，从而跳转到task1函数。但以后执行swtch函数时，则不会跳转到trapret函数。

###os3中的task0和task1的堆栈的起始和终止地址是什么？
- task0的系统栈：0xcd0 - 0x
- task0的用户栈：0x8e8 - 
- task1的系统栈：0x14a0 - 
- task1的用户栈：0x10b8 -

###os3是如何实现任务切换的？
- 在main函数中，初始化task0和task1的系统栈，栈顶保存的是trapret的地址。
- main函数执行到LEV时，跳转到trapret。
- 第一次执行trapret时，设置task0的用户栈，返回时跳转到task0。
- task0执行到某一时刻，触发时钟异常，并将当前栈顶指针指向task1的系统栈栈顶，栈顶保存的是trapret的地址。
- trap函数返回时，跳转到trapret。
- 第二次执行trapret时，设置task1的用户栈，返回时跳转到task1。
- 随后程序将在两个任务的用户栈之间相互切换，情形类似于os1。

###os3的用户态task能够破坏内核态的系统吗？
- 不能，用户态中的栈空间使用的是全局空间，不会影响内核态的系统。

