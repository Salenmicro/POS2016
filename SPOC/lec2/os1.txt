root/usr/os/os1.c  1: // os1.c -- time slice between two kernel tasks
root/usr/os/os1.c  2: 
root/usr/os/os1.c  3: #include <u.h>
root/lib/u.h  1: // u.h
root/lib/u.h  2: 
root/lib/u.h  3: // instruction set
root/lib/u.h  4: enum {
root/lib/u.h  5:   HALT,ENT ,LEV ,JMP ,JMPI,JSR ,JSRA,LEA ,LEAG,CYC ,MCPY,MCMP,MCHR,MSET, // system
root/lib/u.h  6:   LL  ,LLS ,LLH ,LLC ,LLB ,LLD ,LLF ,LG  ,LGS ,LGH ,LGC ,LGB ,LGD ,LGF , // load a
root/lib/u.h  7:   LX  ,LXS ,LXH ,LXC ,LXB ,LXD ,LXF ,LI  ,LHI ,LIF ,
root/lib/u.h  8:   LBL ,LBLS,LBLH,LBLC,LBLB,LBLD,LBLF,LBG ,LBGS,LBGH,LBGC,LBGB,LBGD,LBGF, // load b
root/lib/u.h  9:   LBX ,LBXS,LBXH,LBXC,LBXB,LBXD,LBXF,LBI ,LBHI,LBIF,LBA ,LBAD,
root/lib/u.h  10:   SL  ,SLH ,SLB ,SLD ,SLF ,SG  ,SGH ,SGB ,SGD ,SGF ,                     // store
root/lib/u.h  11:   SX  ,SXH ,SXB ,SXD ,SXF ,
root/lib/u.h  12:   ADDF,SUBF,MULF,DIVF,                                                   // arithmetic
root/lib/u.h  13:   ADD ,ADDI,ADDL,SUB ,SUBI,SUBL,MUL ,MULI,MULL,DIV ,DIVI,DIVL,
root/lib/u.h  14:   DVU ,DVUI,DVUL,MOD ,MODI,MODL,MDU ,MDUI,MDUL,AND ,ANDI,ANDL,
root/lib/u.h  15:   OR  ,ORI ,ORL ,XOR ,XORI,XORL,SHL ,SHLI,SHLL,SHR ,SHRI,SHRL,
root/lib/u.h  16:   SRU ,SRUI,SRUL,EQ  ,EQF ,NE  ,NEF ,LT  ,LTU ,LTF ,GE  ,GEU ,GEF ,      // logical
root/lib/u.h  17:   BZ  ,BZF ,BNZ ,BNZF,BE  ,BEF ,BNE ,BNEF,BLT ,BLTU,BLTF,BGE ,BGEU,BGEF, // conditional
root/lib/u.h  18:   CID ,CUD ,CDI ,CDU ,                                                   // conversion
root/lib/u.h  19:   CLI ,STI ,RTI ,BIN ,BOUT,NOP ,SSP ,PSHA,PSHI,PSHF,PSHB,POPB,POPF,POPA, // misc
root/lib/u.h  20:   IVEC,PDIR,SPAG,TIME,LVAD,TRAP,LUSP,SUSP,LCL ,LCA ,PSHC,POPC,MSIZ,
root/lib/u.h  21:   PSHG,POPG,NET1,NET2,NET3,NET4,NET5,NET6,NET7,NET8,NET9,
root/lib/u.h  22:   POW ,ATN2,FABS,ATAN,LOG ,LOGT,EXP ,FLOR,CEIL,HYPO,SIN ,COS ,TAN ,ASIN, // math
root/lib/u.h  23:   ACOS,SINH,COSH,TANH,SQRT,FMOD,
root/lib/u.h  24:   IDLE
root/lib/u.h  25: };
root/lib/u.h  26: 
root/lib/u.h  27: // system calls
root/lib/u.h  28: enum {
root/lib/u.h  29:   S_fork=1, S_exit,   S_wait,   S_pipe,   S_write,  S_read,   S_close,  S_kill,
root/lib/u.h  30:   S_exec,   S_open,   S_mknod,  S_unlink, S_fstat,  S_link,   S_mkdir,  S_chdir,
root/lib/u.h  31:   S_dup2,   S_getpid, S_sbrk,   S_sleep,  S_uptime, S_lseek,  S_mount,  S_umount,
root/lib/u.h  32:   S_socket, S_bind,   S_listen, S_poll,   S_accept, S_connect, 
root/lib/u.h  33: };
root/lib/u.h  34: 
root/lib/u.h  35: typedef unsigned char uchar;
root/lib/u.h  36: typedef unsigned short ushort;
root/lib/u.h  37: typedef unsigned int uint;
root/lib/u.h  38: 
root/usr/os/os1.c  4: 
root/usr/os/os1.c  5: char task1_stack[200];
root/usr/os/os1.c  6: int *task0_sp;
root/usr/os/os1.c  7: int *task1_sp;
root/usr/os/os1.c  8: 
root/usr/os/os1.c  9: int current;
root/usr/os/os1.c  10: 
root/usr/os/os1.c  11: out(port, val)  { asm(LL,8); asm(LBL,16); asm(BOUT); }
00000000  0000080e  LL    0x8 (D 8)
00000004  00001026  LBL   0x10 (D 16)
00000008  0000009a  BOUT
root/usr/os/os1.c  12: ivec(void *isr) { asm(LL,8); asm(IVEC); }
0000000c  00000002  LEV   0x0 (D 0)
00000010  0000080e  LL    0x8 (D 8)
00000014  000000a4  IVEC
root/usr/os/os1.c  13: stmr(int val)   { asm(LL,8); asm(TIME); }
00000018  00000002  LEV   0x0 (D 0)
0000001c  0000080e  LL    0x8 (D 8)
00000020  000000a7  TIME
root/usr/os/os1.c  14: halt(value)     { asm(LL,8); asm(HALT); }
00000024  00000002  LEV   0x0 (D 0)
00000028  0000080e  LL    0x8 (D 8)
0000002c  00000000  HALT
root/usr/os/os1.c  15: 
root/usr/os/os1.c  16: write(fd, char *p, n) { while (n--) out(fd, *p++); }
00000030  00000002  LEV   0x0 (D 0)
00000034  00000003  JMP   <fwd>
00000038  0000100e  LL    0x10 (D 16)
0000003c  ffffff57  SUBI  0xffffffff (D -1)
00000040  00001040  SL    0x10 (D 16)
00000044  ffffff1f  LXC   0xffffffff (D -1)
00000048  0000009d  PSHA
0000004c  0000100e  LL    0x10 (D 16)
00000050  0000009d  PSHA
00000054  ffffa805  JSR   0xffffffa8 (TO 0x0)
00000058  00001001  ENT   0x10 (D 16)
0000005c  0000180e  LL    0x18 (D 24)
00000060  00000157  SUBI  0x1 (D 1)
00000064  00001840  SL    0x18 (D 24)
00000068  00000154  ADDI  0x1 (D 1)
0000006c  00000086  BNZ   <fwd>
root/usr/os/os1.c  17: 
root/usr/os/os1.c  18: task0()
00000070  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  19: {
root/usr/os/os1.c  20:   while(current < 10) {
00000074  00000003  JMP   <fwd>
root/usr/os/os1.c  21:     write(1, "0", 1);
00000078  0000019e  PSHI  0x1 (D 1)
0000007c  00000008  LEAG  0x0 (D 0)
00000080  0000009d  PSHA
00000084  0000019e  PSHI  0x1 (D 1)
00000088  ffffa805  JSR   0xffffffa8 (TO 0x34)
0000008c  00001801  ENT   0x18 (D 24)
root/usr/os/os1.c  22:   }
root/usr/os/os1.c  23:   write(1,"task0 exit\n", 11);
00000090  0000d015  LG    0xd0 (D 208)
00000094  00000a3b  LBI   0xa (D 10)
00000098  0000008c  BLT   <fwd>
0000009c  00000b9e  PSHI  0xb (D 11)
000000a0  00000208  LEAG  0x2 (D 2)
000000a4  0000009d  PSHA
000000a8  0000019e  PSHI  0x1 (D 1)
000000ac  ffff8405  JSR   0xffffff84 (TO 0x34)
000000b0  00001801  ENT   0x18 (D 24)
root/usr/os/os1.c  24:   halt(0);
000000b4  0000009e  PSHI  0x0 (D 0)
000000b8  ffff6c05  JSR   0xffffff6c (TO 0x28)
000000bc  00000801  ENT   0x8 (D 8)
root/usr/os/os1.c  25: }
root/usr/os/os1.c  26: 
root/usr/os/os1.c  27: task1()
000000c0  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  28: {
root/usr/os/os1.c  29:   while(current < 10) {
000000c4  00000003  JMP   <fwd>
root/usr/os/os1.c  30:     write(1, "1", 1);
000000c8  0000019e  PSHI  0x1 (D 1)
000000cc  00000e08  LEAG  0xe (D 14)
000000d0  0000009d  PSHA
000000d4  0000019e  PSHI  0x1 (D 1)
000000d8  ffff5805  JSR   0xffffff58 (TO 0x34)
000000dc  00001801  ENT   0x18 (D 24)
root/usr/os/os1.c  31:   }
root/usr/os/os1.c  32:   write(1,"task1 exit\n", 11);
000000e0  0000d015  LG    0xd0 (D 208)
000000e4  00000a3b  LBI   0xa (D 10)
000000e8  0000008c  BLT   <fwd>
000000ec  00000b9e  PSHI  0xb (D 11)
000000f0  00001008  LEAG  0x10 (D 16)
000000f4  0000009d  PSHA
000000f8  0000019e  PSHI  0x1 (D 1)
000000fc  ffff3405  JSR   0xffffff34 (TO 0x34)
00000100  00001801  ENT   0x18 (D 24)
root/usr/os/os1.c  33:   halt(0);
00000104  0000009e  PSHI  0x0 (D 0)
00000108  ffff1c05  JSR   0xffffff1c (TO 0x28)
0000010c  00000801  ENT   0x8 (D 8)
root/usr/os/os1.c  34: }
root/usr/os/os1.c  35: 
root/usr/os/os1.c  36: swtch(int *old, int new) // switch stacks
00000110  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  37: {
root/usr/os/os1.c  38:   asm(LEA, 0); // a = sp
00000114  00000007  LEA   0x0 (D 0)
root/usr/os/os1.c  39:   asm(LBL, 8); // b = old
00000118  00000826  LBL   0x8 (D 8)
root/usr/os/os1.c  40:   asm(SX, 0);  // *b = a
0000011c  0000004a  SX    0x0 (D 0)
root/usr/os/os1.c  41:   asm(LL, 16); // a = new
00000120  0000100e  LL    0x10 (D 16)
root/usr/os/os1.c  42:   asm(SSP);    // sp = a
00000124  0000009c  SSP 
root/usr/os/os1.c  43: }
root/usr/os/os1.c  44: 
root/usr/os/os1.c  45: trap()
00000128  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  46: {
root/usr/os/os1.c  47:   if (++current & 1)
0000012c  0000d015  LG    0xd0 (D 208)
00000130  00000154  ADDI  0x1 (D 1)
00000134  0000d045  SG    0xd0 (D 208)
00000138  00000169  ANDI  0x1 (D 1)
0000013c  00000084  BZ    <fwd>
root/usr/os/os1.c  48:     swtch(&task0_sp, task1_sp);
00000140  0000cc15  LG    0xcc (D 204)
00000144  0000009d  PSHA
00000148  0000c808  LEAG  0xc8 (D 200)
0000014c  0000009d  PSHA
00000150  ffffc005  JSR   0xffffffc0 (TO 0x114)
00000154  00001001  ENT   0x10 (D 16)
root/usr/os/os1.c  49:   else
root/usr/os/os1.c  50:     swtch(&task1_sp, task0_sp);
00000158  00000003  JMP   <fwd>
0000015c  0000c815  LG    0xc8 (D 200)
00000160  0000009d  PSHA
00000164  0000cc08  LEAG  0xcc (D 204)
00000168  0000009d  PSHA
0000016c  ffffa405  JSR   0xffffffa4 (TO 0x114)
00000170  00001001  ENT   0x10 (D 16)
root/usr/os/os1.c  51: }
root/usr/os/os1.c  52: 
root/usr/os/os1.c  53: alltraps()
00000174  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  54: {
root/usr/os/os1.c  55:   asm(PSHA);
00000178  0000009d  PSHA
root/usr/os/os1.c  56:   asm(PSHB);
0000017c  000000a0  PSHB
root/usr/os/os1.c  57:   asm(PSHC);
00000180  000000ae  PSHC
root/usr/os/os1.c  58: 
root/usr/os/os1.c  59:   trap();
00000184  ffffa405  JSR   0xffffffa4 (TO 0x12c)
root/usr/os/os1.c  60:     
root/usr/os/os1.c  61:   asm(POPC);
00000188  000000af  POPC
root/usr/os/os1.c  62:   asm(POPB);
0000018c  000000a1  POPB
root/usr/os/os1.c  63:   asm(POPA);
00000190  000000a3  POPA
root/usr/os/os1.c  64:   asm(RTI);
00000194  00000098  RTI 
root/usr/os/os1.c  65: }
root/usr/os/os1.c  66: 
root/usr/os/os1.c  67: trapret()
00000198  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  68: {
root/usr/os/os1.c  69:   asm(POPC);
0000019c  000000af  POPC
root/usr/os/os1.c  70:   asm(POPB);
000001a0  000000a1  POPB
root/usr/os/os1.c  71:   asm(POPA);
000001a4  000000a3  POPA
root/usr/os/os1.c  72:   asm(RTI);
000001a8  00000098  RTI 
root/usr/os/os1.c  73: }
root/usr/os/os1.c  74: 
root/usr/os/os1.c  75: main()
000001ac  00000002  LEV   0x0 (D 0)
root/usr/os/os1.c  76: {
root/usr/os/os1.c  77:   current = 0;
000001b0  00000023  LI    0x0 (D 0)
000001b4  0000d045  SG    0xd0 (D 208)
root/usr/os/os1.c  78: 
root/usr/os/os1.c  79:   stmr(5000);
000001b8  0013889e  PSHI  0x1388 (D 5000)
000001bc  fffe5c05  JSR   0xfffffe5c (TO 0x1c)
000001c0  00000801  ENT   0x8 (D 8)
root/usr/os/os1.c  80:   ivec(alltraps);
000001c4  ffffb008  LEAG  0xffffffb0 (D -80)
000001c8  0000009d  PSHA
000001cc  fffe4005  JSR   0xfffffe40 (TO 0x10)
000001d0  00000801  ENT   0x8 (D 8)
root/usr/os/os1.c  81:   
root/usr/os/os1.c  82:   task1_sp = &task1_stack;
000001d4  00000008  LEAG  0x0 (D 0)
000001d8  0000cc45  SG    0xcc (D 204)
root/usr/os/os1.c  83:   task1_sp += 50;
000001dc  0000cc15  LG    0xcc (D 204)
000001e0  0000c854  ADDI  0xc8 (D 200)
000001e4  0000cc45  SG    0xcc (D 204)
root/usr/os/os1.c  84:   
root/usr/os/os1.c  85:   
root/usr/os/os1.c  86:   task1_sp -= 2; *task1_sp = &task1;
000001e8  0000cc15  LG    0xcc (D 204)
000001ec  00000857  SUBI  0x8 (D 8)
000001f0  0000cc45  SG    0xcc (D 204)
000001f4  fffecc08  LEAG  0xfffffecc (D -308)
000001f8  0000cc2d  LBG   0xcc (D 204)
000001fc  0000004a  SX  
root/usr/os/os1.c  87:   task1_sp -= 2; *task1_sp = 0; // fault code
00000200  0000cc15  LG    0xcc (D 204)
00000204  00000857  SUBI  0x8 (D 8)
00000208  0000cc45  SG    0xcc (D 204)
0000020c  00000023  LI    0x0 (D 0)
00000210  0000cc2d  LBG   0xcc (D 204)
00000214  0000004a  SX  
root/usr/os/os1.c  88:   task1_sp -= 2; *task1_sp = 0; // a  
00000218  0000cc15  LG    0xcc (D 204)
0000021c  00000857  SUBI  0x8 (D 8)
00000220  0000cc45  SG    0xcc (D 204)
00000224  00000023  LI    0x0 (D 0)
00000228  0000cc2d  LBG   0xcc (D 204)
0000022c  0000004a  SX  
root/usr/os/os1.c  89:   task1_sp -= 2; *task1_sp = 0; // b  
00000230  0000cc15  LG    0xcc (D 204)
00000234  00000857  SUBI  0x8 (D 8)
00000238  0000cc45  SG    0xcc (D 204)
0000023c  00000023  LI    0x0 (D 0)
00000240  0000cc2d  LBG   0xcc (D 204)
00000244  0000004a  SX  
root/usr/os/os1.c  90:   task1_sp -= 2; *task1_sp = 0; // c  
00000248  0000cc15  LG    0xcc (D 204)
0000024c  00000857  SUBI  0x8 (D 8)
00000250  0000cc45  SG    0xcc (D 204)
00000254  00000023  LI    0x0 (D 0)
00000258  0000cc2d  LBG   0xcc (D 204)
0000025c  0000004a  SX  
root/usr/os/os1.c  91:   task1_sp -= 2; *task1_sp = &trapret;  
00000260  0000cc15  LG    0xcc (D 204)
00000264  00000857  SUBI  0x8 (D 8)
00000268  0000cc45  SG    0xcc (D 204)
0000026c  ffff2c08  LEAG  0xffffff2c (D -212)
00000270  0000cc2d  LBG   0xcc (D 204)
00000274  0000004a  SX  
root/usr/os/os1.c  92:   
root/usr/os/os1.c  93:   asm(STI);
00000278  00000097  STI 
root/usr/os/os1.c  94:   
root/usr/os/os1.c  95:   task0();
0000027c  fffdf405  JSR   0xfffffdf4 (TO 0x74)
root/usr/os/os1.c  96: }
root/usr/os/os1.c  97: 
00000280  00000002  LEV   0x0 (D 0)
