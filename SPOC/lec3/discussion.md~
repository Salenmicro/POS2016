#课前准备

####了解控制流，异常控制流，函数调用,中断，异常(故障)，系统调用（陷阱）,切换，用户态（用户模式），内核态（内核模式）等基本概念。思考一下这些基本概念在linux, ucore, v9-cpu中的os*.c中是如何具体体现的。
- 控制流：控制转移序列。
- 异常控制流：现代操作系统通过使控制流发生突变来对系统状态做出反应，这些突变称为异常控制流。
- 函数调用：计算机编译或运行时，使用某个函数来完成相关命令。对无参函数调用时则无实际参数表。实际参数表中的参数可以是常数、变量或其它构造类型数据及表达式。各实参之间用逗号分隔。
- 中断：指處理器接收到來自硬體或軟體的信號，提示發生了某個事件，應該被注意，這種情況就稱為中斷。
- 异常：超出程序正常执行流程的某些特殊条件
- 系统调用：指運行在使用者空間的程序向操作系统内核请求需要更高权限运行的服务。系统调用提供用户程序与操作系统之间的接口。
- 切换：
- 用户态：在CPU的设计中，用户态指非特权状态。在此状态下，执行的代码被硬件限定，不能进行某些操作，比如写入其他进程的存储空间，以防止给操作系统带来安全隐患。
- 内核模式：内核模式操作的一种高特权模式，其中的程序代码能直接访问所有内存（包括所有的用户模式进程和应用程序的地址空间）和硬件。也称为“管理员模式”、“保护模式”或“Ring 0”。在这种模式下，监控程序可以执行特权指令，而且受保护的内存区域也是可以访问的。
- 具体实现：使用内核态栈和用户态栈加以区分。

####思考为什么操作系统需要处理中断，异常，系统调用。这些是必须要有的吗？有哪些好处？有哪些不好的地方？
- 系统调用为用户空间进程和硬件设备之间添加了一个中间层，可以
    - 为用户空间提供了一种硬件的抽象接口；

    - 保证了系统的稳定和安全，可以给予权限，用户对访问进行裁决；

    - 每个进程都运行在虚拟系统中； 

####了解在PC机上有啥中断和异常。搜索“80386　开机　启动”
- 当80386系统开机启动或上电复位时，便自动进入实地址模式，用户可以一直运行在实模式，也可以通过软件指令切换到保护模式。
- 实地址模式为处理过程调用和启用中断或异常处理程序提供了16位宽的堆栈和一个中断向量表。
    - 见http://netcourse.cug.edu.cn/NCourse/weixingjisuanji/content/chapter9/9_2/9_2_1.htm

####了解Linux和ucore有哪些系统调用。搜索“linux 系统调用", 搜索lab8中的syscall关键字相关内容。在linux下执行命令: man syscalls
- Linux系统调用列表见http://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html

####会使用linux中的命令:objdump，nm，file, strace，man, 了解这些命令的用途。
- objdump：objdump命令是Linux下的反汇编目标文件或者可执行文件的命令。使用例子如下：
```

```
