#课堂题

####描述符特权级DPL、当前特权级CPL和请求特权级RPL的含义是什么？在哪些寄存器中这些字段？对应的访问条件是什么？ (challenge)写出一些简单的小程序（c or asm）来体现这些特权级的区别和联系。
- DPL：DPL存储在段描述符中，规定访问该段的权限级别(Descriptor Privilege Level)，每个段的DPL固定。
- CPL：CPL是当前进程的权限级别(Current Privilege Level)，是当前正在执行的代码所在的段的特权级，存在于cs寄存器的低两位。
- RPL：RPL说明的是进程对段访问的请求权限(Request Privilege Level)，是对于段选择子而言的，每个段选择子有自己的RPL，它说明的是进程对段访问的请求权限，有点像函数参数。而且RPL对每个段来说不是固定的，两次访问同一段时的RPL可以不同。RPL可能会削弱CPL的作用，例如当前CPL=0的进程要访问一个数据段，它把段选择符中的RPL设为3，这样虽然它对该段仍然只有特权为3的访问权限。
- 对数据段和堆栈段访问时的特权级控制：要求max (CPL, RPL) <= DPL
- 对代码段访问的特权级控制：
	- 所有的程序转跳，CPU都不会把段选择子的RPL赋给转跳后程序的CS.RPL
	- 转跳后程序的CPL(CS.RPL)只会有下面的两种可能：
	- 转跳后程序的CPL(CS.RPL)=转跳前程序的CPL(CS.RPL) 
	- 转跳后程序的CPL(CS.RPL)=转跳后程序的CodeDescriptor.DPL
- 以call为例
	- 如果能成功转跳到一致代码段, 转跳后程序的CPL(CS.RPL) = 转跳前程序的CPL(CS.RPL)，(转跳后程序的CPL继承了转跳前程序的CPL)
	- 如果能成功转跳到非一致代码段, 转跳后程序的CPL(CS．RPL)　＝转跳后程序的Descriptor.DPL。

####比较不同特权级的中断切换时的堆栈变化差别；(challenge)写出一些简单的小程序（c or asm）来显示出不同特权级的的中断切换的堆栈变化情况。

- 中断的保存过程差别
	- 内核态产生的中断依然处在内核态，使用同一个堆栈，在这个堆栈上压入被打断的那一刻寄存器的内容，包括Error Code（严重异常）、EIP、CS（当前被打断的地址或下一条地址）和EFLAGS（标志寄存器）。
	- 用户态产生的中断将产生特权级变化，使用不同的堆栈，除了压入上述内容以外，还需要压入ESP和SS（用户态栈的地址）。
- 中断的恢复过程差别
	- 内核态产生的中断依然恢复到内核态，使用同一个堆栈，执行iret指令返回时，将Error Code弹出，根据CS和EIP跳转到被打断的地方继续执行，恢复EFLAGS。
	- 用户态产生的中断将从内核态恢复到用户态，切换回用户态的堆栈，执行iret指令返回时，除了弹出上述内容以外，还要弹出SS和ESP。

###v9-cpu的执行过程(challenge)
- 参考os*.c，写一个小程序，能够显示在用户态无法执行的所有特权指令，能够显示出不同特权级的的中断切换的堆栈变化情况。
- 扩展em.c，可以打印v9-cpu执行的每一条指令和寄存器状态
- 扩展em.c，在产生fatal错误后，把这之前执行的n条指令和寄存器状态打印出来
- 扩展c.c和em.c，使得可以指定em.c能够跟踪并打印执行程序中对全局变量的读写或修改的指令，以及指令的执行情况
- 扩展em.c的debugger功能，可以设置断点
- 扩展em.c的debugger功能，可以任意打断当前执行程序的执行，回到debugger

